{"version":3,"file":"in2iframeconsent.js","sources":["../../src/CookieManager.ts","../../src/index.ts"],"sourcesContent":["import { Cookie } from './types';\n\nexport default class CookieManager {\n  public static _getCookie(name: string): string {\n    const b = document.cookie.match(`(^|;)\\\\s*${name}\\\\s*=\\\\s*([^;]+)`);\n\n    if (b) return b.pop() || '';\n    return '';\n  }\n\n  public static _setCookie({ name, value, expirationMonths }: Cookie): void {\n    const domain = window.location.hostname;\n\n    const expirationDate = new Date();\n    expirationDate.setMonth(expirationDate.getMonth() + expirationMonths);\n    const expirationDateString = expirationDate.toUTCString();\n\n    document.cookie = `${name}=${value};expires=${expirationDateString};domain=${domain};path=/;SameSite=None;secure`;\n  }\n\n  public static _deleteCookie(name: string): void {\n    this._setCookie({\n      name,\n      value: '',\n      expirationMonths: -1,\n    });\n  }\n}\n","import { version } from '../package.json';\nimport { IframeDataAttribute } from './types';\nimport CookieManager from './CookieManager';\n\nclass In2iframeswitch {\n  private _cookieName: string = 'iframeswitch';\n\n  private _expirationMonths: number = 3;\n\n  private _version: string = version;\n\n  constructor() {\n    this._configurationLoader();\n    this._addButtonEvents();\n    this._autoEnableIframes();\n    In2iframeswitch._addDomainInformation();\n  }\n\n  private _configurationLoader(): void {\n    if (!window.iframeSwitchConfig) return;\n\n    const configObject = window.iframeSwitchConfig;\n\n    this._cookieName = configObject.cookieName || this._cookieName;\n    this._expirationMonths = configObject.expirationMonths || this._expirationMonths;\n  }\n\n  /**\n     * Replaces iFrameconsentbox with correct iFrame\n     * @param container\n     * @private\n     */\n  private static _changeElementToIframe(container: HTMLElement): void {\n    const attributes = In2iframeswitch._getAllDataAttributes(container);\n    const iframe = document.createElement('iframe');\n\n    attributes.forEach((attribute) => {\n      iframe.setAttribute(\n        attribute.name,\n        attribute.value,\n      );\n    });\n\n    const parentNode = container.parentNode as HTMLElement;\n    parentNode.insertBefore(iframe, container);\n    parentNode.classList.remove('iframeswitch-init');\n    parentNode.removeChild(container);\n  }\n\n  /**\n     * Enable Iframe, if src of the iframe is set in cookie for iframeswitch\n     * @private\n     */\n  private _autoEnableIframes(): void {\n    const elements = document.querySelectorAll<HTMLElement>('[data-iframeswitch-src]');\n    const cookieString = CookieManager._getCookie(this._cookieName);\n    const activeCookies: string[] = cookieString.split(',');\n\n    elements.forEach((element) => {\n      if (activeCookies.includes('*')) {\n        In2iframeswitch._changeElementToIframe(element);\n        return;\n      }\n\n      const iframeURL: string | null = element.getAttribute('data-iframeswitch-src');\n\n      if (iframeURL) {\n        const iframeSource = In2iframeswitch._extractHostname(iframeURL);\n\n        activeCookies.forEach((currentCookie) => {\n          if (currentCookie === iframeSource) {\n            In2iframeswitch._changeElementToIframe(element);\n          }\n        });\n      }\n    });\n  }\n\n  /**\n     * Replace <span data-iframeswitch-uri=\"true\"></span> with the iFrame URL.\n     * So it can be used inside the container\n     */\n  private static _addDomainInformation(): void {\n    const elements = document.querySelectorAll<HTMLElement>('[data-iframeswitch-uri]');\n    elements.forEach((element) => {\n      const iframeSwitchUri = element;\n\n      const parent = In2iframeswitch._closest(\n        iframeSwitchUri,\n        '[data-iframeswitch-src]',\n      );\n\n      if (parent) {\n        const parentSrc = parent.getAttribute('data-iframeswitch-src') || 'error, domain not found';\n        iframeSwitchUri.innerHTML = In2iframeswitch._extractHostname(parentSrc);\n      }\n    });\n  }\n\n  private _addButtonEvents(): void {\n    const elements = document.querySelectorAll<HTMLElement>('[data-iframeswitch-src]');\n\n    elements.forEach((element) => {\n      const elementStart = element.querySelector('[data-iframeswitch-submit]');\n\n      if (elementStart) {\n        elementStart.addEventListener(\n          'click',\n          (event) => {\n            const currentCookies = CookieManager._getCookie(this._cookieName);\n            if (currentCookies === '*') return;\n\n            const container = In2iframeswitch._closest(\n              event.target as HTMLElement,\n              '[data-iframeswitch-src]',\n            );\n            if (!container) return;\n\n            const iframeSwitchURL = container.getAttribute('data-iframeswitch-src');\n            if (!iframeSwitchURL) return;\n\n            const newCookie = In2iframeswitch._extractHostname(iframeSwitchURL);\n\n            if (!currentCookies.split(',').includes(newCookie)) {\n              CookieManager._setCookie({\n                name: this._cookieName,\n                value: currentCookies.length > 0 ? `${currentCookies},${newCookie}` : newCookie,\n                expirationMonths: this._expirationMonths,\n              });\n            }\n\n            this._autoEnableIframes();\n          },\n        );\n      }\n    });\n  }\n\n  /**\n     * JavaScript pendent to jQuerys closest() function\n     */\n  private static _closest(element: HTMLElement, selector: string): HTMLElement | null {\n    let matchesFn;\n\n    // find vendor prefix\n    [\n      'matches',\n      'webkitMatchesSelector',\n      'mozMatchesSelector',\n      'msMatchesSelector',\n      'oMatchesSelector',\n    ].some((fn) => {\n      // @ts-ignore\n      if (typeof document.body[fn] === 'function') {\n        matchesFn = fn;\n        return true;\n      }\n      return false;\n    });\n\n    let parent: HTMLElement;\n\n    // traverse parents\n    while (element) {\n      // @ts-ignore\n      parent = element.parentElement;\n      // @ts-ignore\n      if (parent && parent[matchesFn](selector)) {\n        return parent;\n      }\n\n      // eslint-disable-next-line no-param-reassign\n      element = parent;\n    }\n\n    return null;\n  }\n\n  private static _getAllDataAttributes(container: HTMLElement): IframeDataAttribute[] {\n    const attributes: { name: string, value: string }[] = [];\n\n    Array.from(container.attributes).forEach((attribute) => {\n      if (attribute.name.indexOf('data-iframeswitch-') !== -1) {\n        attributes.push({\n          name: attribute.name.replace('data-iframeswitch-', ''),\n          value: attribute.value,\n        });\n      }\n    });\n\n    return attributes;\n  }\n\n  private static _extractHostname(url: string): string {\n    let hostname: string = (url.indexOf('//') > -1)\n      ? url.split('/')[2]\n      : url.split('/')[0];\n\n    hostname = hostname.split(':').shift() as string;\n    hostname = hostname.split('?').shift() as string;\n\n    return hostname || '';\n  }\n\n  /**\n     * Enables all iFrameConsents\n     */\n  public enableAll(): void {\n    CookieManager._setCookie({\n      name: this._cookieName,\n      value: '*',\n      expirationMonths: this._expirationMonths,\n    });\n\n    this._autoEnableIframes();\n  }\n\n  /**\n     * Disables all accepted iFrameConsents and deletes all in2iframeconsent Cookies\n     */\n  public disableAll(): void {\n    CookieManager._deleteCookie(this._cookieName);\n  }\n\n  public getVersion(): void {\n    // eslint-disable-next-line no-console\n    console.log(`in2iframeconsent is running on version ${this._version} ðŸŒˆ`);\n  }\n}\n\nwindow.iframeSwitch = new In2iframeswitch();\n"],"names":["CookieManager","_getCookie","name","b","document","cookie","match","pop","_setCookie","_ref","value","expirationMonths","domain","window","location","hostname","expirationDate","Date","setMonth","getMonth","expirationDateString","toUTCString","_deleteCookie","this","iframeSwitch","In2iframeswitch","_cookieName","_expirationMonths","_version","_configurationLoader","_addButtonEvents","_autoEnableIframes","_addDomainInformation","iframeSwitchConfig","configObject","cookieName","_changeElementToIframe","container","attributes","_getAllDataAttributes","iframe","createElement","forEach","attribute","setAttribute","parentNode","insertBefore","classList","remove","removeChild","elements","querySelectorAll","activeCookies","split","element","includes","iframeURL","getAttribute","iframeSource","_extractHostname","currentCookie","iframeSwitchUri","parent","_closest","parentSrc","innerHTML","_this","elementStart","querySelector","addEventListener","event","currentCookies","target","iframeSwitchURL","newCookie","length","selector","matchesFn","some","fn","body","parentElement","Array","from","indexOf","push","replace","url","shift","enableAll","disableAll","getVersion","console","log"],"mappings":"gBAEqBA,iDACLC,EAAP,SAAkBC,GACvB,IAAMC,EAAIC,SAASC,OAAOC,MAAhB,YAAkCJ,EAAlC,oBAEV,OAAIC,GAAUA,EAAEI,OACT,IAGKC,EAAAA,EAAP,SAAAC,GAAoBP,IAAAA,EAAuCO,EAAvCP,KAAMQ,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,iBAChCC,EAASC,OAAOC,SAASC,SAEzBC,EAAiB,IAAIC,KAC3BD,EAAeE,SAASF,EAAeG,WAAaR,GACpD,IAAMS,EAAuBJ,EAAeK,cAE5CjB,SAASC,OAAYH,MAAQQ,EAA7B,YAA8CU,EAA9C,WAA6ER,EAA7E,kCAGYU,EAAP,SAAqBpB,GAC1BqB,KAAKf,EAAW,CACdN,KAAAA,EACAQ,MAAO,GACPC,kBAAmB,UC8MzBE,OAAOW,aAAe,4BA3NpB,SAAAC,IAAAF,KANQG,EAAsB,eAEtBC,KAAAA,EAA4B,OAE5BC,WAGNL,KAAKM,IACLN,KAAKO,IACLP,KAAKQ,IACLN,EAAgBO,sBAuNpBnB,SApNUgB,EAAA,WACN,GAAKhB,OAAOoB,mBAAZ,CAEA,IAAMC,EAAerB,OAAOoB,mBAE5BV,KAAKG,EAAcQ,EAAaC,YAAcZ,KAAKG,EACnDH,KAAKI,EAAoBO,EAAavB,kBAAoBY,KAAKI,MAQlDS,EAAP,SAA8BC,GACpC,IAAMC,EAAab,EAAgBc,EAAsBF,GACnDG,EAASpC,SAASqC,cAAc,UAEtCH,EAAWI,QAAQ,SAACC,GAClBH,EAAOI,aACLD,EAAUzC,KACVyC,EAAUjC,SAId,IAAMmC,EAAaR,EAAUQ,WAC7BA,EAAWC,aAAaN,EAAQH,GAChCQ,EAAWE,UAAUC,OAAO,qBAC5BH,EAAWI,YAAYZ,MAOjBN,EAAA,WACN,IAAMmB,EAAW9C,SAAS+C,iBAA8B,2BAElDC,EADepD,EAAcC,EAAWsB,KAAKG,GACN2B,MAAM,KAEnDH,EAASR,QAAQ,SAACY,GAChB,GAAIF,EAAcG,SAAS,KACzB9B,EAAgBW,EAAuBkB,OADzC,CAKA,IAAME,EAA2BF,EAAQG,aAAa,yBAEtD,GAAID,EAAW,CACb,IAAME,EAAejC,EAAgBkC,EAAiBH,GAEtDJ,EAAcV,QAAQ,SAACkB,GACjBA,IAAkBF,GACpBjC,EAAgBW,EAAuBkB,YAWlCtB,EAAP,WACW5B,SAAS+C,iBAA8B,2BAC/CT,QAAQ,SAACY,GAChB,IAAMO,EAAkBP,EAElBQ,EAASrC,EAAgBsC,EAC7BF,EACA,2BAGF,GAAIC,EAAQ,CACV,IAAME,EAAYF,EAAOL,aAAa,0BAA4B,0BAClEI,EAAgBI,UAAYxC,EAAgBkC,EAAiBK,OAK3DlC,EAAAA,EAAA,WAAgB,IAAAoC,EAAA3C,KACLnB,SAAS+C,iBAA8B,2BAE/CT,QAAQ,SAACY,GAChB,IAAMa,EAAeb,EAAQc,cAAc,8BAEvCD,GACFA,EAAaE,iBACX,QACA,SAACC,GACC,IAAMC,EAAiBvE,EAAcC,EAAWiE,EAAKxC,GACrD,GAAuB,MAAnB6C,EAAJ,CAEA,IAAMlC,EAAYZ,EAAgBsC,EAChCO,EAAME,OACN,2BAEF,GAAKnC,EAAL,CAEA,IAAMoC,EAAkBpC,EAAUoB,aAAa,yBAC/C,GAAKgB,EAAL,CAEA,IAAMC,EAAYjD,EAAgBkC,EAAiBc,GAE9CF,EAAelB,MAAM,KAAKE,SAASmB,IACtC1E,EAAcQ,EAAW,CACvBN,KAAMgE,EAAKxC,EACXhB,MAAO6D,EAAeI,OAAS,EAAOJ,MAAkBG,EAAcA,EACtE/D,iBAAkBuD,EAAKvC,IAI3BuC,EAAKnC,YAUAgC,EAAAA,EAAP,SAAgBT,EAAsBsB,GAC5C,IAAIC,EAkBAf,EAGJ,IAlBA,CACE,UACA,wBACA,qBACA,oBACA,oBACAgB,KAAK,SAACC,GAEN,MAAiC,mBAAtB3E,SAAS4E,KAAKD,KACvBF,EAAYE,QASTzB,GAAS,CAId,IAFAQ,EAASR,EAAQ2B,gBAEHnB,EAAOe,GAAWD,GAC9B,OAAOd,EAITR,EAAUQ,EAGZ,OAAO,MAGMvB,EAAAA,EAAP,SAA6BF,GACnC,IAAMC,EAAgD,GAWtD,OATA4C,MAAMC,KAAK9C,EAAUC,YAAYI,QAAQ,SAACC,IACc,IAAlDA,EAAUzC,KAAKkF,QAAQ,uBACzB9C,EAAW+C,KAAK,CACdnF,KAAMyC,EAAUzC,KAAKoF,QAAQ,qBAAsB,IACnD5E,MAAOiC,EAAUjC,UAKhB4B,KAGMqB,EAAP,SAAwB4B,GAC9B,IAAIxE,EAAoBwE,EAAIH,QAAQ,OAAS,EACzCG,EAAIlC,MAAM,KAAK,GACfkC,EAAIlC,MAAM,KAAK,GAKnB,OAFAtC,GADAA,EAAWA,EAASsC,MAAM,KAAKmC,SACXnC,MAAM,KAAKmC,UAEZ,IAMdC,EAAAA,UAAA,WACLzF,EAAcQ,EAAW,CACvBN,KAAMqB,KAAKG,EACXhB,MAAO,IACPC,iBAAkBY,KAAKI,IAGzBJ,KAAKQ,KAMA2D,EAAAA,WAAA,WACL1F,EAAcsB,EAAcC,KAAKG,IAG5BiE,EAAAA,WAAA,WAELC,QAAQC,IAAR,0CAAsDtE,KAAKK,EAA3D,QAIJf"}
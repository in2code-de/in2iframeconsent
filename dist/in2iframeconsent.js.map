{"version":3,"file":"in2iframeconsent.js","sources":["../src/CookieManager.ts","../src/index.ts"],"sourcesContent":["import { Cookie } from './types';\n\nexport default class CookieManager {\n  public static getCookie(name: string): string {\n    const b = document.cookie.match(`(^|;)\\\\s*${name}\\\\s*=\\\\s*([^;]+)`);\n    return b ? b.pop() : '';\n  }\n\n  public static setCookie({ name, value, expirationYears }: Cookie): void {\n    const domain = window.location.hostname;\n\n    const expirationDate = new Date();\n    expirationDate.setFullYear(expirationDate.getFullYear() + expirationYears);\n    const expirationDateString = expirationDate.toUTCString();\n\n    document.cookie = `${name}=${value};expires=${expirationDateString};domain=${domain};path=/;SameSite=None;secure`;\n  }\n\n  public static deleteCookie(name: string): void {\n    this.setCookie({\n      name,\n      value: 'nothing',\n      expirationYears: -100,\n    });\n  }\n}\n","import { IframeDataAttribute } from './types';\nimport CookieManager from './CookieManager';\n\nclass In2iframeswitch {\n  private cookieName: string = 'iframeswitch';\n\n  private expirationYears: number = 10;\n\n  constructor() {\n    this.addButtonEvents();\n    this.autoEnableIframes();\n    In2iframeswitch.addDomainInformation();\n\n    // eslint-disable-next-line @typescript-eslint/dot-notation\n    window['iframeSwitch'] = this;\n  }\n\n  /**\n     * Replaces iFrameconsentbox with correct iFrame\n     * @param container\n     * @private\n     */\n  private static changeElementToIframe(container: HTMLElement): void {\n    const attributes = In2iframeswitch.getAllDataAttributes(container);\n    const iframe = document.createElement('iframe');\n\n    attributes.forEach((attribute) => {\n      iframe.setAttribute(\n        attribute.name,\n        attribute.value,\n      );\n    });\n\n    const parentNode = container.parentNode as HTMLElement;\n    parentNode.insertBefore(iframe, container);\n    parentNode.classList.remove('iframeswitch-init');\n    parentNode.removeChild(container);\n  }\n\n  /**\n     * Enable Iframe, if src of the iframe is set in cookie for iframeswitch\n     * @private\n     */\n  private autoEnableIframes(): void {\n    const elements = document.querySelectorAll<HTMLElement>('[data-iframeswitch-src]');\n    const cookieString = CookieManager.getCookie(this.cookieName);\n    const activeCookies: string[] = cookieString.split(',');\n\n    elements.forEach((element) => {\n      if (activeCookies.includes('*')) {\n        In2iframeswitch.changeElementToIframe(element);\n        return;\n      }\n\n      const iframeSource = In2iframeswitch.extractHostname(element.getAttribute('data-iframeswitch-src'));\n\n      activeCookies.forEach((currentCookie) => {\n        if (currentCookie === iframeSource) {\n          In2iframeswitch.changeElementToIframe(element);\n        }\n      });\n    });\n  }\n\n  /**\n     * Replace <span data-iframeswitch-uri=\"true\"></span> with the iFrame URL.\n     * So it can be used inside the container\n     */\n  private static addDomainInformation(): void {\n    const elements = document.querySelectorAll<HTMLElement>('[data-iframeswitch-uri]');\n    elements.forEach((element) => {\n      const parentSrc = In2iframeswitch.closest(\n        element,\n        '[data-iframeswitch-src]',\n      ).getAttribute('data-iframeswitch-src');\n\n      element.innerHTML = In2iframeswitch.extractHostname(parentSrc);\n    });\n  }\n\n  private addButtonEvents(): void {\n    const elements = document.querySelectorAll<HTMLElement>('[data-iframeswitch-src]');\n\n    elements.forEach((element) => {\n      const elementStart = element.querySelector('[data-iframeswitch-submit]');\n\n      elementStart.addEventListener(\n        'click',\n        (event) => {\n          const container = In2iframeswitch.closest(\n            event.target as HTMLElement,\n            '[data-iframeswitch-src]',\n          );\n\n          const currentCookies = CookieManager.getCookie(this.cookieName);\n\n          if (currentCookies === '*') {\n            return;\n          }\n\n          const newCookie = In2iframeswitch.extractHostname(\n            container.getAttribute('data-iframeswitch-src')\n          );\n\n          CookieManager.setCookie({\n            name: this.cookieName,\n            value: currentCookies.length > 0 ? `${currentCookies},${newCookie}` : newCookie,\n            expirationYears: this.expirationYears,\n          })\n\n          this.autoEnableIframes();\n        },\n      );\n    });\n  }\n\n  /**\n     * JavaScript pendent to jQuerys closest() function\n     */\n  private static closest(element: HTMLElement, selector: string): HTMLElement | null {\n    let matchesFn;\n\n    // find vendor prefix\n    [\n      'matches',\n      'webkitMatchesSelector',\n      'mozMatchesSelector',\n      'msMatchesSelector',\n      'oMatchesSelector',\n    ].some((fn) => {\n      if (typeof document.body[fn] === 'function') {\n        matchesFn = fn;\n        return true;\n      }\n      return false;\n    });\n\n    let parent: HTMLElement;\n\n    // traverse parents\n    while (element) {\n      parent = element.parentElement;\n      if (parent && parent[matchesFn](selector)) {\n        return parent;\n      }\n      element = parent;\n    }\n\n    return null;\n  }\n\n  private static getAllDataAttributes(container: HTMLElement): IframeDataAttribute[] {\n    const attributes = [];\n\n    Array.from(container.attributes).forEach((attribute) => {\n      if (attribute.name.indexOf('data-iframeswitch-') !== -1) {\n        attributes.push({\n          name: attribute.name.replace('data-iframeswitch-', ''),\n          value: attribute.value,\n        });\n      }\n    });\n\n    return attributes;\n  }\n\n  private static extractHostname(url: string): string {\n    let hostname: string;\n\n    if (url.indexOf('//') > -1) {\n      hostname = url.split('/')[2];\n    } else {\n      hostname = url.split('/')[0];\n    }\n\n    hostname = hostname.split(':')[0];\n    hostname = hostname.split('?')[0];\n\n    return hostname;\n  }\n\n  /**\n     * Enables all iFrameConsents\n     */\n  public enableAll(): void {\n    CookieManager.setCookie({\n      name: this.cookieName,\n      value: '*',\n      expirationYears: this.expirationYears,\n    });\n\n    this.autoEnableIframes();\n  }\n\n  /**\n     * Disables all accepted iFrameConsents and deletes all in2iframeconsent Cookies\n     */\n  public disableAll(): void {\n    CookieManager.deleteCookie(this.cookieName);\n  }\n}\n\n// eslint-disable-next-line no-new\nnew In2iframeswitch();\n"],"names":["CookieManager","getCookie","name","b","document","cookie","match","pop","setCookie","value","expirationYears","domain","window","location","hostname","expirationDate","Date","setFullYear","getFullYear","expirationDateString","toUTCString","deleteCookie","this","cookieName","addButtonEvents","autoEnableIframes","In2iframeswitch","addDomainInformation","changeElementToIframe","container","attributes","getAllDataAttributes","iframe","createElement","forEach","attribute","setAttribute","parentNode","insertBefore","classList","remove","removeChild","elements","querySelectorAll","activeCookies","split","element","includes","iframeSource","extractHostname","getAttribute","currentCookie","parentSrc","closest","innerHTML","querySelector","addEventListener","event","target","currentCookies","_this","newCookie","length","selector","matchesFn","parent","some","fn","body","parentElement","Array","from","indexOf","push","replace","url","enableAll","disableAll"],"mappings":"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"}
{"version":3,"file":"in2iframeconsent.modern.js","sources":["../src/CookieManager.ts","../src/index.ts"],"sourcesContent":["import { Cookie } from './types';\n\nexport default class CookieManager {\n  public static getCookie(name: string): string {\n    const b = document.cookie.match(`(^|;)\\\\s*${name}\\\\s*=\\\\s*([^;]+)`);\n    return b ? b.pop() : '';\n  }\n\n  public static setCookie({ name, value, expirationYears }: Cookie): void {\n    const domain = window.location.hostname;\n\n    const expirationDate = new Date();\n    expirationDate.setFullYear(expirationDate.getFullYear() + expirationYears);\n    const expirationDateString = expirationDate.toUTCString();\n\n    document.cookie = `${name}=${value};expires=${expirationDateString};domain=${domain};path=/;SameSite=None;secure`;\n  }\n\n  public static deleteCookie(name: string): void {\n    this.setCookie({\n      name,\n      value: 'nothing',\n      expirationYears: -100,\n    });\n  }\n}\n","import './assets/sass/styles.scss';\nimport { IframeDataAttribute } from './types';\nimport CookieManager from './CookieManager';\n\nclass In2iframeswitch {\n  private cookieName: string = 'iframeswitch';\n\n  private expirationYears: number = 10;\n\n  constructor() {\n    this.addButtonEvents();\n    this.autoEnableIframes();\n    In2iframeswitch.addDomainInformation();\n\n    // eslint-disable-next-line @typescript-eslint/dot-notation\n    window['iframeSwitch'] = this;\n  }\n\n  /**\n     * Replaces iFrameconsentbox with correct iFrame\n     * @param container\n     * @private\n     */\n  private static changeElementToIframe(container: HTMLElement): void {\n    const attributes = In2iframeswitch.getAllDataAttributes(container);\n    const iframe = document.createElement('iframe');\n\n    attributes.forEach((attribute) => {\n      iframe.setAttribute(\n        attribute.name,\n        attribute.value,\n      );\n    });\n\n    const parentNode = container.parentNode as HTMLElement;\n    parentNode.insertBefore(iframe, container);\n    parentNode.classList.remove('iframeswitch-init');\n    parentNode.removeChild(container);\n  }\n\n  /**\n     * Enable Iframe, if src of the iframe is set in cookie for iframeswitch\n     * @private\n     */\n  private autoEnableIframes(): void {\n    const elements = document.querySelectorAll<HTMLElement>('[data-iframeswitch-src]');\n    const cookieString = CookieManager.getCookie(this.cookieName);\n    const activeCookies: string[] = cookieString.split(',');\n\n    elements.forEach((element) => {\n      if (activeCookies.includes('*')) {\n        In2iframeswitch.changeElementToIframe(element);\n        return;\n      }\n\n      const iframeSource = In2iframeswitch.extractHostname(element.getAttribute('data-iframeswitch-src'));\n\n      activeCookies.forEach((currentCookie) => {\n        if (currentCookie === iframeSource) {\n          In2iframeswitch.changeElementToIframe(element);\n        }\n      });\n    });\n  }\n\n  /**\n     * Replace <span data-iframeswitch-uri=\"true\"></span> with the iFrame URL.\n     * So it can be used inside the container\n     */\n  private static addDomainInformation(): void {\n    const elements = document.querySelectorAll<HTMLElement>('[data-iframeswitch-uri]');\n    elements.forEach((element) => {\n      const parentSrc = In2iframeswitch.closest(\n        element,\n        '[data-iframeswitch-src]',\n      ).getAttribute('data-iframeswitch-src');\n\n      element.innerHTML = In2iframeswitch.extractHostname(parentSrc);\n    });\n  }\n\n  private addButtonEvents(): void {\n    const elements = document.querySelectorAll<HTMLElement>('[data-iframeswitch-src]');\n\n    elements.forEach((element) => {\n      const elementStart = element.querySelector('[data-iframeswitch-submit]');\n\n      elementStart.addEventListener(\n        'click',\n        (event) => {\n          const container = In2iframeswitch.closest(\n            event.target as HTMLElement,\n            '[data-iframeswitch-src]',\n          );\n\n          const currentCookies = CookieManager.getCookie(this.cookieName);\n\n          if (currentCookies === '*') {\n            return;\n          }\n\n          const newCookie = In2iframeswitch.extractHostname(\n            container.getAttribute('data-iframeswitch-src')\n          );\n\n          CookieManager.setCookie({\n            name: this.cookieName,\n            value: currentCookies.length > 0 ? `${currentCookies},${newCookie}` : newCookie,\n            expirationYears: this.expirationYears,\n          })\n\n          this.autoEnableIframes();\n        },\n      );\n    });\n  }\n\n  /**\n     * JavaScript pendent to jQuerys closest() function\n     */\n  private static closest(element: HTMLElement, selector: string): HTMLElement | null {\n    let matchesFn;\n\n    // find vendor prefix\n    [\n      'matches',\n      'webkitMatchesSelector',\n      'mozMatchesSelector',\n      'msMatchesSelector',\n      'oMatchesSelector',\n    ].some((fn) => {\n      if (typeof document.body[fn] === 'function') {\n        matchesFn = fn;\n        return true;\n      }\n      return false;\n    });\n\n    let parent: HTMLElement;\n\n    // traverse parents\n    while (element) {\n      parent = element.parentElement;\n      if (parent && parent[matchesFn](selector)) {\n        return parent;\n      }\n      element = parent;\n    }\n\n    return null;\n  }\n\n  private static getAllDataAttributes(container: HTMLElement): IframeDataAttribute[] {\n    const attributes = [];\n\n    Array.from(container.attributes).forEach((attribute) => {\n      if (attribute.name.indexOf('data-iframeswitch-') !== -1) {\n        attributes.push({\n          name: attribute.name.replace('data-iframeswitch-', ''),\n          value: attribute.value,\n        });\n      }\n    });\n\n    return attributes;\n  }\n\n  private static extractHostname(url: string): string {\n    let hostname: string;\n\n    if (url.indexOf('//') > -1) {\n      hostname = url.split('/')[2];\n    } else {\n      hostname = url.split('/')[0];\n    }\n\n    hostname = hostname.split(':')[0];\n    hostname = hostname.split('?')[0];\n\n    return hostname;\n  }\n\n  /**\n     * Enables all iFrameConsents\n     */\n  public enableAll(): void {\n    CookieManager.setCookie({\n      name: this.cookieName,\n      value: '*',\n      expirationYears: this.expirationYears,\n    });\n\n    this.autoEnableIframes();\n  }\n\n  /**\n     * Disables all accepted iFrameConsents and deletes all in2iframeconsent Cookies\n     */\n  public disableAll(): void {\n    CookieManager.deleteCookie(this.cookieName);\n  }\n}\n\n// eslint-disable-next-line no-new\nnew In2iframeswitch();\n"],"names":["CookieManager","static","name","b","document","cookie","match","pop","value","expirationYears","domain","window","location","hostname","expirationDate","Date","setFullYear","getFullYear","expirationDateString","toUTCString","this","setCookie","In2iframeswitch","constructor","cookieName","addButtonEvents","autoEnableIframes","addDomainInformation","container","attributes","getAllDataAttributes","iframe","createElement","forEach","attribute","setAttribute","parentNode","insertBefore","classList","remove","removeChild","elements","querySelectorAll","activeCookies","getCookie","split","element","includes","changeElementToIframe","iframeSource","extractHostname","getAttribute","currentCookie","parentSrc","closest","innerHTML","querySelector","addEventListener","event","target","currentCookies","newCookie","length","selector","matchesFn","parent","some","fn","body","parentElement","Array","from","indexOf","push","replace","url","enableAll","disableAll","deleteCookie"],"mappings":"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"}